version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: platform-service
    ports:
      - "3000:3000"
      - "9464:9464"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - SERVICE_NAME=platform-service
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=platform_db
      - DB_USER=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - VAULT_ENABLED=false
      - OTEL_EXPORTER_TYPE=jaeger
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS_PORT=9464
      - AUDIT_RETENTION_DAYS=90
    depends_on:
      - postgres
      - redis
      - jaeger
    networks:
      - platform-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/liveness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: platform-postgres
    environment:
      - POSTGRES_DB=platform_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - platform-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: platform-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - platform-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: platform-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - platform-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: platform-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - platform-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: platform-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - platform-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  platform-network:
    driver: bridge
