version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: platform-postgres
    environment:
      POSTGRES_USER: platform_user
      POSTGRES_PASSWORD: platform_password
      POSTGRES_DB: platform
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U platform_user']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: platform-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: platform-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: platform-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 3001
      CORS_ORIGIN: http://localhost:3000
      DATABASE_URL: postgresql://platform_user:platform_password@postgres:5432/platform
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: assets
      LOG_LEVEL: debug
    ports:
      - '3001:3001'
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages
      - /app/apps/backend/node_modules
      - /app/node_modules
    command: pnpm --filter @platform/backend start:dev

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: platform-frontend
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - '3000:3000'
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages
      - /app/apps/frontend/node_modules
      - /app/apps/frontend/.next
      - /app/node_modules
    command: pnpm --filter @platform/frontend dev

volumes:
  postgres_data:
  redis_data:
  minio_data:
